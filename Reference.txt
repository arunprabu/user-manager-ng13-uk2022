
Angular
---
  Expectation:
    Hands-on 
    ---
      Explain => Coding => Demo => TRY OUT => [TODO] 

    CRU[D] App 
    ---
  
  Skillset 
  --
    * TypeScript 

  Softwares
  ---
    NodeJS V 16.15.x+
    
SPA Frameworks/Libraries
---
  #1 React JS - Library 
  #2 VueJS - Framework
  #3 Angular 2+ - Framework
  #4 Svelte - Framework 


===
Angular Versions History
--
  Sep 2016 - Angular 2  - CLI Version 1.1.x 
      2017 - Angular 4  - CLI Version 1.4.x 
      2017 - Angular 5  - CLI Version 1.7.x 
      (started following semver)
      2018 - Angular 6  - CLI version 6.x.x 
      2018 - Angular 7  - CLI version 7.x.x  
      2019 - Angular 8  - CLI version 8.x.x 
      2020 - Angular 9  - CLI version 9.x.x 
      2020 - Angular 10 - CLI version 10.x.x 
      2020 - Angular 11 - CLI version 11.x.x 
      2021 - Angular 12 - CLI version 12.x.x 
      2021 - Angular 13 - CLI version 13.x.x  [LEARN] 
      2022 - Angular 14 - CLI version 14.x.x 

---

Dev Machine Setup 
---
  Angular CLI 
  npm i @angular/cli@13.3.8 -g
    
---
  To create a project 
    ng new user-manager-ng13-uk2022
  
  
File Walkthru 
Ng App Arch 
How ng apps are running / getting bootstrapped? 


Think in Angular
--
  1. Identifying Component 
  2. Identifying component hierarchy 

Building Blocks 
--
  Components 
  Directives 
  Services
  Interfaces/Models/Classes 
  Guards
  Pipes
  Modules
  Interceptor 
  
---
Concepts
--
  * Data Binding 
  * Routing 
  * Any to Any Comp Communication
  * Http Calls / RxJS/Observable 
  * Subscription
  * Unit Testing


---

ng generate component header (4)

Project Structure - Feature-wise and Building-Block wise project structure
---
  src/
    app/
      shared/
        header/
        footer/
        menu/
      concepts/
        components/
          employee/
          ceb/
          ...
          ...
          ...
        directives/
          colorizer/
      about/
      home/
      users/
        components/
        services/
      ...
      ...
      ...
      ...
      ...
      ...



---


Types of Styles
---
  1. External Styles 
      bootstrap, style.css, comp specific css 

  2. Internal Styles 

  3. Inline Styles 

----
ViewEncapsulation
--


Routing 
---
  --
  Single Page App (SPA)
  ---
    Characteristics(7)
    ---
      1. Pages should not refresh / reload [DONE]
      2. URL should change [DONE]
      3. History should be maintained w/o page refresh/reload [DONE]
      4. Retain header and footer w/o loading again and again [DONE] 
      5. Page should show contextual updates in between header and footer [DONE]
      6. Active menu should be set [DONE]
      7. Page Title should also be changed [TODO]
          Prereq: Dependency Injection 

  Step 0:
  ---
    Identify the URLs for the Menu Items 
    Home            - localhost:4200/
    Concepts        - localhost:4200/concepts
    User Manager    - localhost:4200/users
    About           - localhost:4200/about 

  Step 1:
  ---
    Let's setup the Menus with proper URLs in menu.comp.html

  Step 2: 
  ---
    Let's create the components for our URLs 
    ng g c home -t -s 
    ng g c concepts -s 
    ng g c users -s
    ng g c about -s

    
  Step 3:
  --
    Check the app. URLs not stable yet. 

    Now it's time to config to routes / urls 

    go to app-routing.module.ts 
    // config the routes 
    const routes: Routes = [
      { path: '', component: HomeComponent },
      { path: 'concepts', component: ConceptsComponent },
      { path: 'users', component: UsersComponent },
      { path: 'about', component: AboutComponent },
    ];

  Step 4: 
  --
    check the app. URLs should change. But, the specific component is not loaded in between header and footer

    go to app.comp.html -- layout file 
    have <router-outlet></router-outlet> in between header and footer 


  Step 5:
  ---
    check the app. The comp is loaded in b/w header and footer. But the pages still refresh 

    Let's fix it in menu.comp.html

    replace href with routerLink 

  Step 6:
  --
    Let's work on setting Active Menu in menu.comp.html 

    add  routerLinkActive="active" in all anchor tags 

  
  Step 7:
  --
    Check the app. Home menu will always be active. Let's fix it 

    the home menu anchor tag should have [routerLinkActiveOptions]="{exact: true}" 

    Routing is over!

---

Data Binding 
---
  TS <=> HTML 

  1. Interpolation
      TS => HTML 
      {{}}

  2. Property Binding
      TS => HTML 
      []

  3. Event Binding 
      TS <= HTML 
      ()

  4. Two Way Binding 
      TS <=> HTML 
      [(ngModel)]
      Note: can be implemented on form elements such as input, textarea.. 

  5. Custom Property Binding
      Using @Input() and []

  6. Custom Event Binding 



Cross Component Communication
---
    1. Parent to Child Component Communication
        using Custom Property Binding 

    2. Child to Parent Component Communication
        2.1 using Custom Event Binding - we can send the data to parent comp 
        2.2 using @ViewChild() [TODO] - we can access child comp's data from parent comp 
          Prereq: LifeCycle Hooks

    3. Any to Any Component Communication
        Prereq: Services, RxJS/Observables, Subscription, LifeCycle Hooks

        
Directives
---
  * special instructions to the DOM 

  1. Attribute Directives 
      routerLink, routerLinkActive, routerLinkActiveOptions
      
  2. Structural Directives 
      * impact can be found in structural layer (HTML)

      *ngIf, *ngFor, ngSwitch [TODO]

  3. Custom Attribute Directives 
      * datatables

  4. Custom Structural Directives [TODO]


====

Forms in Angular
---
  1. Template Driven Forms 
      * made with html 
      * easiest type of form 
      * will use directives for validation and other other purposes 
      * part of FormsModule

      disadv
      --
        * not suitable for Complex form validations 
        * not suitable for Unit Testing 

  2. Reactive Forms [ Recommended]
      * made with html + ts 
      * easy 
      * Reactive forms are defined programmatically at the level of the component class
      * part of ReactiveFormsModule

      adv 
      --
        * suitable for Complex form validations 
        * suitable for Unit Testing 

---


